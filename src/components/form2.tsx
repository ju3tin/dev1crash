"use client"
import React, { useState, useMemo } from 'react';
import { Connection, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';
import { AnchorProvider, Program, Idl, BN } from '@project-serum/anchor';
import { useWallet } from '@solana/wallet-adapter-react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import idl from '../public/idl.json'; // Your program's IDL file (generated by Anchor)

// Program ID from env; avoid constructing at module load with invalid placeholder
const PROGRAM_ID_STRING = '6NT24hJjnqwKw6JNDkrV2a7nPvB8GdB61Csz9mEB7DnZ';
const PROGRAM_ID: PublicKey | null = (() => {
  try {
    return PROGRAM_ID_STRING ? new PublicKey(PROGRAM_ID_STRING) : null;
  } catch (_) {
    return null;
  }
})();

const WithdrawForm = () => {
  const { publicKey, sendTransaction } = useWallet();
  const [amount, setAmount] = useState('');
  const [error, setError] = useState('');
  const [txStatus, setTxStatus] = useState('');

  // Set up Solana connection and Anchor provider
  const connection = useMemo(
    () => new Connection('https://api.devnet.solana.com', 'confirmed'), // Use mainnet-beta for production
    []
  );
  const provider = useMemo(() => {
    if (!publicKey) return null;
    return new AnchorProvider(connection, window.solana, { commitment: 'confirmed' });
  }, [publicKey, connection]);

  // Initialize Anchor program
  const program = useMemo(() => {
    if (!provider || !PROGRAM_ID) return null;
    return new Program(idl as Idl, PROGRAM_ID, provider);
  }, [provider, PROGRAM_ID_STRING]);

  const handleWithdraw = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!publicKey || !program || !provider || !PROGRAM_ID) {
      setError('Please connect your wallet');
      return;
    }

    const amountLamports = parseFloat(amount) * 1_000_000_000; // Convert SOL to lamports
    if (isNaN(amountLamports) || amountLamports <= 0) {
      setError('Please enter a valid amount');
      return;
    }

    try {
      setError('');
      setTxStatus('Processing...');

      // Derive PDAs for vault and user balance
      const [vaultPda] = await PublicKey.findProgramAddress(
        [Buffer.from('vault')],
        PROGRAM_ID
      );
      const [userBalancePda] = await PublicKey.findProgramAddress(
        [publicKey.toBuffer(), Buffer.from('balance')],
        PROGRAM_ID
      );

      // Build the withdraw instruction
      const instruction = await program.methods
        .withdraw(new BN(amountLamports))
        .accounts({
          user: publicKey,
          vault: vaultPda,
          userBalance: userBalancePda,
          systemProgram: SystemProgram.programId,
        })
        .instruction();

      // Create and send transaction
      const transaction = new Transaction().add(instruction);
      const signature = await sendTransaction(transaction, connection);

      // Confirm transaction
      await connection.confirmTransaction(signature, 'confirmed');
      setTxStatus(`Withdrawal successful! Tx: ${signature}`);
      setAmount('');
    } catch (err: any) {
      console.error(err);
      const errorMessage = err.message.includes('InsufficientBalance')
        ? 'Insufficient balance in your account'
        : 'Withdrawal failed. Please try again.';
      setError(errorMessage);
      setTxStatus('');
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}>
      <h2>Withdraw SOL</h2>
      <WalletMultiButton />
      {publicKey ? (
        <form onSubmit={handleWithdraw}>
          <div style={{ marginBottom: '15px' }}>
            <label>
              Amount (SOL):
              <input
                type="number"
                step="0.01"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                placeholder="Enter amount in SOL"
                style={{ width: '100%', padding: '8px', marginTop: '5px' }}
              />
            </label>
          </div>
          <button
            type="submit"
            style={{
              padding: '10px 20px',
              background: '#007bff',
              color: '#fff',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
            }}
          >
            Withdraw
          </button>
        </form>
      ) : (
        <p>Please connect your wallet to withdraw.</p>
      )}
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {txStatus && <p style={{ color: 'green' }}>{txStatus}</p>}
    </div>
  );
};

export default WithdrawForm;