
   "use client"
   import React, { useState, useEffect } from 'react';
   import * as anchor from '@coral-xyz/anchor';
   import { Program, web3, BN } from '@coral-xyz/anchor';
   import {
     useAnchorWallet,
     useConnection,
     useWallet,
   } from '@solana/wallet-adapter-react';
   import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
   import idl from '@/erd.json'; // Your IDL
   //import './App.css';

   const programId = new web3.PublicKey('4JnQm2avRVzUsB2yji4NWER4QVYoQdJtQ4Zy7njMk9Zs');

   const App: React.FC = () => {
     const { connection } = useConnection();
     const wallet = useAnchorWallet();
     const { publicKey } = useWallet();
     const [program, setProgram] = useState<Program | null>(null);
     const [gamePublicKey, setGamePublicKey] = useState<web3.PublicKey | null>(null);
     const [gameState, setGameState] = useState<any>(null);
     const [betAmount, setBetAmount] = useState<string>('0.01');
     const [multiplier, setMultiplier] = useState<string>('1.000');
     const [error, setError] = useState<string>('');


     
     // Initialize program
     useEffect(() => {
       if (wallet) {
         const provider = new anchor.AnchorProvider(connection, wallet, {
           commitment: 'confirmed',
         });
         anchor.setProvider(provider);
         const prog = new Program(idl, programId, provider);
         setProgram(prog);
       }
     }, [wallet, connection]);

     // Fetch game state
     const fetchGameState = async (gameKey: web3.PublicKey) => {
       if (!program) return;
       try {
        const game = await program.account.Game.fetch(gameKey);
         setGameState(game);
       } catch (err) {
         console.error('Error fetching game state:', err);
       }
     };

     // Initialize game
     const initializeGame = async () => {
       if (!program || !wallet) {
         setError('Connect wallet first');
         return;
       }
       const gameKeypair = web3.Keypair.generate();
       try {
         await program.methods
           .initializeGame(8)
           .accounts({
             game: gameKeypair.publicKey,
             authority: wallet.publicKey,
             systemProgram: web3.SystemProgram.programId,
           })
           .signers([gameKeypair])
           .rpc();
         setGamePublicKey(gameKeypair.publicKey);
         await fetchGameState(gameKeypair.publicKey);
         setError('');
       } catch (err: any) {
         setError('Error initializing game: ' + err.message);
       }
     };

     // Place bet
     const placeBet = async () => {
       if (!program || !wallet || !gamePublicKey) {
         setError('Initialize game and connect wallet first');
         return;
       }
       const [escrowPda] = web3.PublicKey.findProgramAddressSync(
         [Buffer.from('escrow'), gamePublicKey.toBuffer()],
         programId
       );
       const [betPda] = web3.PublicKey.findProgramAddressSync(
         [Buffer.from('bet'), gamePublicKey.toBuffer(), wallet.publicKey.toBuffer()],
         programId
       );
       try {
         const amount = new BN(parseFloat(betAmount) * 1_000_000_000); // SOL to lamports
         await program.methods
           .placeBet(amount)
           .accounts({
             game: gamePublicKey,
             bet: betPda,
             player: wallet.publicKey,
             escrow: escrowPda,
             systemProgram: web3.SystemProgram.programId,
           })
           .rpc();
         await fetchGameState(gamePublicKey);
         setError('');
       } catch (err: any) {
         setError('Error placing bet: ' + err.message);
       }
     };

     // Start game
     const startGame = async () => {
       if (!program || !wallet || !gamePublicKey) {
         setError('Initialize game and connect wallet first');
         return;
       }
       try {
         await program.methods
           .startGame(new BN(2_000)) // Example crash point: 2x
           .accounts({
             game: gamePublicKey,
             authority: wallet.publicKey,
           })
           .rpc();
         await fetchGameState(gamePublicKey);
         setError('');
       } catch (err: any) {
         setError('Error starting game: ' + err.message);
       }
     };

     // Cash out
     const cashOut = async () => {
       if (!program || !wallet || !gamePublicKey) {
         setError('Initialize game and connect wallet first');
         return;
       }
       const [escrowPda] = web3.PublicKey.findProgramAddressSync(
         [Buffer.from('escrow'), gamePublicKey.toBuffer()],
         programId
       );
       const [betPda] = web3.PublicKey.findProgramAddressSync(
         [Buffer.from('bet'), gamePublicKey.toBuffer(), wallet.publicKey.toBuffer()],
         programId
       );
       try {
         await program.methods
           .cashOut(new BN(parseFloat(multiplier) * 1_000))
           .accounts({
             game: gamePublicKey,
             bet: betPda,
             player: wallet.publicKey,
             escrow: escrowPda,
             authority: wallet.publicKey,
           })
           .rpc();
         await fetchGameState(gamePublicKey);
         setError('');
       } catch (err: any) {
         setError('Error cashing out: ' + err.message);
       }
     };

     // End game
     const endGame = async () => {
       if (!program || !wallet || !gamePublicKey) {
         setError('Initialize game and connect wallet first');
         return;
       }
       try {
         await program.methods
           .endGame()
           .accounts({
             game: gamePublicKey,
             authority: wallet.publicKey,
           })
           .rpc();
         setGamePublicKey(null);
         setGameState(null);
         setError('');
       } catch (err: any) {
         setError('Error ending game: ' + err.message);
       }
     };

     return (
       <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center p-4">
         <WalletModalProvider>
           <WalletMultiButton className="mb-4" />
         </WalletModalProvider>
         <h1 className="text-3xl font-bold mb-4">Crash Game</h1>
         {error && <p className="text-red-500 mb-4">{error}</p>}
         {gameState ? (
           <div className="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-md">
             <p>Players: {gameState.currentPlayers}/{gameState.maxPlayers}</p>
             <p>Multiplier: {(gameState.multiplier / 1000).toFixed(3)}x</p>
             <p>Status: {gameState.isActive ? 'Active' : 'Inactive'}</p>
             {gameState.isActive && <p>Crash Point: {(gameState.crashPoint / 1000).toFixed(3)}x</p>}
           </div>
         ) : (
           <p>No game initialized</p>
         )}
         <div className="mt-4 w-full max-w-md">
           <button
             onClick={initializeGame}
             className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded mb-2"
             disabled={!wallet}
           >
             Initialize Game
           </button>
           <div className="flex flex-col mb-2">
             <label className="mb-1">Bet Amount (SOL):</label>
             <input
               type="number"
               value={betAmount}
               onChange={(e) => setBetAmount(e.target.value)}
               className="bg-gray-700 text-white p-2 rounded"
               min="0.01"
               step="0.01"
             />
           </div>
           <button
             onClick={placeBet}
             className="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded mb-2"
             disabled={!wallet || !gamePublicKey}
           >
             Place Bet
           </button>
           <button
             onClick={startGame}
             className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 rounded mb-2"
             disabled={!wallet || !gamePublicKey}
           >
             Start Game
           </button>
           <div className="flex flex-col mb-2">
             <label className="mb-1">Cash Out Multiplier (x):</label>
             <input
               type="number"
               value={multiplier}
               onChange={(e) => setMultiplier(e.target.value)}
               className="bg-gray-700 text-white p-2 rounded"
               min="1"
               step="0.001"
             />
           </div>
           <button
             onClick={cashOut}
             className="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-2 rounded mb-2"
             disabled={!wallet || !gamePublicKey}
           >
             Cash Out
           </button>
           <button
             onClick={endGame}
             className="w-full bg-red-600 hover:bg-red-700 text-white py-2 rounded"
             disabled={!wallet || !gamePublicKey}
           >
             End Game
           </button>
         </div>
       </div>
     );
   };

   